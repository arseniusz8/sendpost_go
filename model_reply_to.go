/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the ReplyTo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplyTo{}

// ReplyTo struct for ReplyTo
type ReplyTo struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewReplyTo instantiates a new ReplyTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplyTo() *ReplyTo {
	this := ReplyTo{}
	return &this
}

// NewReplyToWithDefaults instantiates a new ReplyTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplyToWithDefaults() *ReplyTo {
	this := ReplyTo{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ReplyTo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyTo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ReplyTo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ReplyTo) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReplyTo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplyTo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReplyTo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReplyTo) SetName(v string) {
	o.Name = &v
}

func (o ReplyTo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplyTo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableReplyTo struct {
	value *ReplyTo
	isSet bool
}

func (v NullableReplyTo) Get() *ReplyTo {
	return v.value
}

func (v *NullableReplyTo) Set(val *ReplyTo) {
	v.value = val
	v.isSet = true
}

func (v NullableReplyTo) IsSet() bool {
	return v.isSet
}

func (v *NullableReplyTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplyTo(val *ReplyTo) *NullableReplyTo {
	return &NullableReplyTo{value: val, isSet: true}
}

func (v NullableReplyTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplyTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


