/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the EmailMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailMessage{}

// EmailMessage struct for EmailMessage
type EmailMessage struct {
	Attachments []Attachment `json:"attachments,omitempty"`
	From *From `json:"from,omitempty"`
	Groups []string `json:"groups,omitempty"`
	HtmlBody *string `json:"htmlBody,omitempty"`
	Ippool *string `json:"ippool,omitempty"`
	PreText *string `json:"preText,omitempty"`
	ReplyTo *ReplyTo `json:"replyTo,omitempty"`
	Subject *string `json:"subject,omitempty"`
	Template *string `json:"template,omitempty"`
	TextBody *string `json:"textBody,omitempty"`
	To []To `json:"to,omitempty"`
	TrackClicks *bool `json:"trackClicks,omitempty"`
	TrackOpens *bool `json:"trackOpens,omitempty"`
	Headers map[string]interface{} `json:"headers,omitempty"`
	AmpBody *string `json:"ampBody,omitempty"`
}

// NewEmailMessage instantiates a new EmailMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailMessage() *EmailMessage {
	this := EmailMessage{}
	return &this
}

// NewEmailMessageWithDefaults instantiates a new EmailMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailMessageWithDefaults() *EmailMessage {
	this := EmailMessage{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *EmailMessage) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *EmailMessage) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *EmailMessage) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *EmailMessage) GetFrom() From {
	if o == nil || IsNil(o.From) {
		var ret From
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetFromOk() (*From, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *EmailMessage) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given From and assigns it to the From field.
func (o *EmailMessage) SetFrom(v From) {
	o.From = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *EmailMessage) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *EmailMessage) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *EmailMessage) SetGroups(v []string) {
	o.Groups = v
}

// GetHtmlBody returns the HtmlBody field value if set, zero value otherwise.
func (o *EmailMessage) GetHtmlBody() string {
	if o == nil || IsNil(o.HtmlBody) {
		var ret string
		return ret
	}
	return *o.HtmlBody
}

// GetHtmlBodyOk returns a tuple with the HtmlBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetHtmlBodyOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlBody) {
		return nil, false
	}
	return o.HtmlBody, true
}

// HasHtmlBody returns a boolean if a field has been set.
func (o *EmailMessage) HasHtmlBody() bool {
	if o != nil && !IsNil(o.HtmlBody) {
		return true
	}

	return false
}

// SetHtmlBody gets a reference to the given string and assigns it to the HtmlBody field.
func (o *EmailMessage) SetHtmlBody(v string) {
	o.HtmlBody = &v
}

// GetIppool returns the Ippool field value if set, zero value otherwise.
func (o *EmailMessage) GetIppool() string {
	if o == nil || IsNil(o.Ippool) {
		var ret string
		return ret
	}
	return *o.Ippool
}

// GetIppoolOk returns a tuple with the Ippool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetIppoolOk() (*string, bool) {
	if o == nil || IsNil(o.Ippool) {
		return nil, false
	}
	return o.Ippool, true
}

// HasIppool returns a boolean if a field has been set.
func (o *EmailMessage) HasIppool() bool {
	if o != nil && !IsNil(o.Ippool) {
		return true
	}

	return false
}

// SetIppool gets a reference to the given string and assigns it to the Ippool field.
func (o *EmailMessage) SetIppool(v string) {
	o.Ippool = &v
}

// GetPreText returns the PreText field value if set, zero value otherwise.
func (o *EmailMessage) GetPreText() string {
	if o == nil || IsNil(o.PreText) {
		var ret string
		return ret
	}
	return *o.PreText
}

// GetPreTextOk returns a tuple with the PreText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetPreTextOk() (*string, bool) {
	if o == nil || IsNil(o.PreText) {
		return nil, false
	}
	return o.PreText, true
}

// HasPreText returns a boolean if a field has been set.
func (o *EmailMessage) HasPreText() bool {
	if o != nil && !IsNil(o.PreText) {
		return true
	}

	return false
}

// SetPreText gets a reference to the given string and assigns it to the PreText field.
func (o *EmailMessage) SetPreText(v string) {
	o.PreText = &v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *EmailMessage) GetReplyTo() ReplyTo {
	if o == nil || IsNil(o.ReplyTo) {
		var ret ReplyTo
		return ret
	}
	return *o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetReplyToOk() (*ReplyTo, bool) {
	if o == nil || IsNil(o.ReplyTo) {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *EmailMessage) HasReplyTo() bool {
	if o != nil && !IsNil(o.ReplyTo) {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given ReplyTo and assigns it to the ReplyTo field.
func (o *EmailMessage) SetReplyTo(v ReplyTo) {
	o.ReplyTo = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EmailMessage) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailMessage) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EmailMessage) SetSubject(v string) {
	o.Subject = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *EmailMessage) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *EmailMessage) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *EmailMessage) SetTemplate(v string) {
	o.Template = &v
}

// GetTextBody returns the TextBody field value if set, zero value otherwise.
func (o *EmailMessage) GetTextBody() string {
	if o == nil || IsNil(o.TextBody) {
		var ret string
		return ret
	}
	return *o.TextBody
}

// GetTextBodyOk returns a tuple with the TextBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetTextBodyOk() (*string, bool) {
	if o == nil || IsNil(o.TextBody) {
		return nil, false
	}
	return o.TextBody, true
}

// HasTextBody returns a boolean if a field has been set.
func (o *EmailMessage) HasTextBody() bool {
	if o != nil && !IsNil(o.TextBody) {
		return true
	}

	return false
}

// SetTextBody gets a reference to the given string and assigns it to the TextBody field.
func (o *EmailMessage) SetTextBody(v string) {
	o.TextBody = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *EmailMessage) GetTo() []To {
	if o == nil || IsNil(o.To) {
		var ret []To
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetToOk() ([]To, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *EmailMessage) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given []To and assigns it to the To field.
func (o *EmailMessage) SetTo(v []To) {
	o.To = v
}

// GetTrackClicks returns the TrackClicks field value if set, zero value otherwise.
func (o *EmailMessage) GetTrackClicks() bool {
	if o == nil || IsNil(o.TrackClicks) {
		var ret bool
		return ret
	}
	return *o.TrackClicks
}

// GetTrackClicksOk returns a tuple with the TrackClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetTrackClicksOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackClicks) {
		return nil, false
	}
	return o.TrackClicks, true
}

// HasTrackClicks returns a boolean if a field has been set.
func (o *EmailMessage) HasTrackClicks() bool {
	if o != nil && !IsNil(o.TrackClicks) {
		return true
	}

	return false
}

// SetTrackClicks gets a reference to the given bool and assigns it to the TrackClicks field.
func (o *EmailMessage) SetTrackClicks(v bool) {
	o.TrackClicks = &v
}

// GetTrackOpens returns the TrackOpens field value if set, zero value otherwise.
func (o *EmailMessage) GetTrackOpens() bool {
	if o == nil || IsNil(o.TrackOpens) {
		var ret bool
		return ret
	}
	return *o.TrackOpens
}

// GetTrackOpensOk returns a tuple with the TrackOpens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetTrackOpensOk() (*bool, bool) {
	if o == nil || IsNil(o.TrackOpens) {
		return nil, false
	}
	return o.TrackOpens, true
}

// HasTrackOpens returns a boolean if a field has been set.
func (o *EmailMessage) HasTrackOpens() bool {
	if o != nil && !IsNil(o.TrackOpens) {
		return true
	}

	return false
}

// SetTrackOpens gets a reference to the given bool and assigns it to the TrackOpens field.
func (o *EmailMessage) SetTrackOpens(v bool) {
	o.TrackOpens = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *EmailMessage) GetHeaders() map[string]interface{} {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *EmailMessage) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]interface{} and assigns it to the Headers field.
func (o *EmailMessage) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

// GetAmpBody returns the AmpBody field value if set, zero value otherwise.
func (o *EmailMessage) GetAmpBody() string {
	if o == nil || IsNil(o.AmpBody) {
		var ret string
		return ret
	}
	return *o.AmpBody
}

// GetAmpBodyOk returns a tuple with the AmpBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailMessage) GetAmpBodyOk() (*string, bool) {
	if o == nil || IsNil(o.AmpBody) {
		return nil, false
	}
	return o.AmpBody, true
}

// HasAmpBody returns a boolean if a field has been set.
func (o *EmailMessage) HasAmpBody() bool {
	if o != nil && !IsNil(o.AmpBody) {
		return true
	}

	return false
}

// SetAmpBody gets a reference to the given string and assigns it to the AmpBody field.
func (o *EmailMessage) SetAmpBody(v string) {
	o.AmpBody = &v
}

func (o EmailMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.HtmlBody) {
		toSerialize["htmlBody"] = o.HtmlBody
	}
	if !IsNil(o.Ippool) {
		toSerialize["ippool"] = o.Ippool
	}
	if !IsNil(o.PreText) {
		toSerialize["preText"] = o.PreText
	}
	if !IsNil(o.ReplyTo) {
		toSerialize["replyTo"] = o.ReplyTo
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.TextBody) {
		toSerialize["textBody"] = o.TextBody
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.TrackClicks) {
		toSerialize["trackClicks"] = o.TrackClicks
	}
	if !IsNil(o.TrackOpens) {
		toSerialize["trackOpens"] = o.TrackOpens
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.AmpBody) {
		toSerialize["ampBody"] = o.AmpBody
	}
	return toSerialize, nil
}

type NullableEmailMessage struct {
	value *EmailMessage
	isSet bool
}

func (v NullableEmailMessage) Get() *EmailMessage {
	return v.value
}

func (v *NullableEmailMessage) Set(val *EmailMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailMessage(val *EmailMessage) *NullableEmailMessage {
	return &NullableEmailMessage{value: val, isSet: true}
}

func (v NullableEmailMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


