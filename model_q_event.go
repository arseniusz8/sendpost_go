/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the QEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QEvent{}

// QEvent struct for QEvent
type QEvent struct {
	AccountID *int64 `json:"accountID,omitempty"`
	EventID *string `json:"eventID,omitempty"`
	EventMetadata *EventMetadata `json:"eventMetadata,omitempty"`
	From *string `json:"from,omitempty"`
	Groups []string `json:"groups,omitempty"`
	IpID *int64 `json:"ipID,omitempty"`
	MessageID *string `json:"messageID,omitempty"`
	MessageType *string `json:"messageType,omitempty"`
	SubAccountID *int64 `json:"subAccountID,omitempty"`
	SubmittedAt *int64 `json:"submittedAt,omitempty"`
	To *string `json:"to,omitempty"`
	TpspId *int64 `json:"tpspId,omitempty"`
	Type *int64 `json:"type,omitempty"`
}

// NewQEvent instantiates a new QEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQEvent() *QEvent {
	this := QEvent{}
	return &this
}

// NewQEventWithDefaults instantiates a new QEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQEventWithDefaults() *QEvent {
	this := QEvent{}
	return &this
}

// GetAccountID returns the AccountID field value if set, zero value otherwise.
func (o *QEvent) GetAccountID() int64 {
	if o == nil || IsNil(o.AccountID) {
		var ret int64
		return ret
	}
	return *o.AccountID
}

// GetAccountIDOk returns a tuple with the AccountID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetAccountIDOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountID) {
		return nil, false
	}
	return o.AccountID, true
}

// HasAccountID returns a boolean if a field has been set.
func (o *QEvent) HasAccountID() bool {
	if o != nil && !IsNil(o.AccountID) {
		return true
	}

	return false
}

// SetAccountID gets a reference to the given int64 and assigns it to the AccountID field.
func (o *QEvent) SetAccountID(v int64) {
	o.AccountID = &v
}

// GetEventID returns the EventID field value if set, zero value otherwise.
func (o *QEvent) GetEventID() string {
	if o == nil || IsNil(o.EventID) {
		var ret string
		return ret
	}
	return *o.EventID
}

// GetEventIDOk returns a tuple with the EventID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetEventIDOk() (*string, bool) {
	if o == nil || IsNil(o.EventID) {
		return nil, false
	}
	return o.EventID, true
}

// HasEventID returns a boolean if a field has been set.
func (o *QEvent) HasEventID() bool {
	if o != nil && !IsNil(o.EventID) {
		return true
	}

	return false
}

// SetEventID gets a reference to the given string and assigns it to the EventID field.
func (o *QEvent) SetEventID(v string) {
	o.EventID = &v
}

// GetEventMetadata returns the EventMetadata field value if set, zero value otherwise.
func (o *QEvent) GetEventMetadata() EventMetadata {
	if o == nil || IsNil(o.EventMetadata) {
		var ret EventMetadata
		return ret
	}
	return *o.EventMetadata
}

// GetEventMetadataOk returns a tuple with the EventMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetEventMetadataOk() (*EventMetadata, bool) {
	if o == nil || IsNil(o.EventMetadata) {
		return nil, false
	}
	return o.EventMetadata, true
}

// HasEventMetadata returns a boolean if a field has been set.
func (o *QEvent) HasEventMetadata() bool {
	if o != nil && !IsNil(o.EventMetadata) {
		return true
	}

	return false
}

// SetEventMetadata gets a reference to the given EventMetadata and assigns it to the EventMetadata field.
func (o *QEvent) SetEventMetadata(v EventMetadata) {
	o.EventMetadata = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *QEvent) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *QEvent) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *QEvent) SetFrom(v string) {
	o.From = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *QEvent) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *QEvent) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *QEvent) SetGroups(v []string) {
	o.Groups = v
}

// GetIpID returns the IpID field value if set, zero value otherwise.
func (o *QEvent) GetIpID() int64 {
	if o == nil || IsNil(o.IpID) {
		var ret int64
		return ret
	}
	return *o.IpID
}

// GetIpIDOk returns a tuple with the IpID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetIpIDOk() (*int64, bool) {
	if o == nil || IsNil(o.IpID) {
		return nil, false
	}
	return o.IpID, true
}

// HasIpID returns a boolean if a field has been set.
func (o *QEvent) HasIpID() bool {
	if o != nil && !IsNil(o.IpID) {
		return true
	}

	return false
}

// SetIpID gets a reference to the given int64 and assigns it to the IpID field.
func (o *QEvent) SetIpID(v int64) {
	o.IpID = &v
}

// GetMessageID returns the MessageID field value if set, zero value otherwise.
func (o *QEvent) GetMessageID() string {
	if o == nil || IsNil(o.MessageID) {
		var ret string
		return ret
	}
	return *o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetMessageIDOk() (*string, bool) {
	if o == nil || IsNil(o.MessageID) {
		return nil, false
	}
	return o.MessageID, true
}

// HasMessageID returns a boolean if a field has been set.
func (o *QEvent) HasMessageID() bool {
	if o != nil && !IsNil(o.MessageID) {
		return true
	}

	return false
}

// SetMessageID gets a reference to the given string and assigns it to the MessageID field.
func (o *QEvent) SetMessageID(v string) {
	o.MessageID = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *QEvent) GetMessageType() string {
	if o == nil || IsNil(o.MessageType) {
		var ret string
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetMessageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *QEvent) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given string and assigns it to the MessageType field.
func (o *QEvent) SetMessageType(v string) {
	o.MessageType = &v
}

// GetSubAccountID returns the SubAccountID field value if set, zero value otherwise.
func (o *QEvent) GetSubAccountID() int64 {
	if o == nil || IsNil(o.SubAccountID) {
		var ret int64
		return ret
	}
	return *o.SubAccountID
}

// GetSubAccountIDOk returns a tuple with the SubAccountID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetSubAccountIDOk() (*int64, bool) {
	if o == nil || IsNil(o.SubAccountID) {
		return nil, false
	}
	return o.SubAccountID, true
}

// HasSubAccountID returns a boolean if a field has been set.
func (o *QEvent) HasSubAccountID() bool {
	if o != nil && !IsNil(o.SubAccountID) {
		return true
	}

	return false
}

// SetSubAccountID gets a reference to the given int64 and assigns it to the SubAccountID field.
func (o *QEvent) SetSubAccountID(v int64) {
	o.SubAccountID = &v
}

// GetSubmittedAt returns the SubmittedAt field value if set, zero value otherwise.
func (o *QEvent) GetSubmittedAt() int64 {
	if o == nil || IsNil(o.SubmittedAt) {
		var ret int64
		return ret
	}
	return *o.SubmittedAt
}

// GetSubmittedAtOk returns a tuple with the SubmittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetSubmittedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.SubmittedAt) {
		return nil, false
	}
	return o.SubmittedAt, true
}

// HasSubmittedAt returns a boolean if a field has been set.
func (o *QEvent) HasSubmittedAt() bool {
	if o != nil && !IsNil(o.SubmittedAt) {
		return true
	}

	return false
}

// SetSubmittedAt gets a reference to the given int64 and assigns it to the SubmittedAt field.
func (o *QEvent) SetSubmittedAt(v int64) {
	o.SubmittedAt = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *QEvent) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *QEvent) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *QEvent) SetTo(v string) {
	o.To = &v
}

// GetTpspId returns the TpspId field value if set, zero value otherwise.
func (o *QEvent) GetTpspId() int64 {
	if o == nil || IsNil(o.TpspId) {
		var ret int64
		return ret
	}
	return *o.TpspId
}

// GetTpspIdOk returns a tuple with the TpspId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetTpspIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TpspId) {
		return nil, false
	}
	return o.TpspId, true
}

// HasTpspId returns a boolean if a field has been set.
func (o *QEvent) HasTpspId() bool {
	if o != nil && !IsNil(o.TpspId) {
		return true
	}

	return false
}

// SetTpspId gets a reference to the given int64 and assigns it to the TpspId field.
func (o *QEvent) SetTpspId(v int64) {
	o.TpspId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QEvent) GetType() int64 {
	if o == nil || IsNil(o.Type) {
		var ret int64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QEvent) GetTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int64 and assigns it to the Type field.
func (o *QEvent) SetType(v int64) {
	o.Type = &v
}

func (o QEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountID) {
		toSerialize["accountID"] = o.AccountID
	}
	if !IsNil(o.EventID) {
		toSerialize["eventID"] = o.EventID
	}
	if !IsNil(o.EventMetadata) {
		toSerialize["eventMetadata"] = o.EventMetadata
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.IpID) {
		toSerialize["ipID"] = o.IpID
	}
	if !IsNil(o.MessageID) {
		toSerialize["messageID"] = o.MessageID
	}
	if !IsNil(o.MessageType) {
		toSerialize["messageType"] = o.MessageType
	}
	if !IsNil(o.SubAccountID) {
		toSerialize["subAccountID"] = o.SubAccountID
	}
	if !IsNil(o.SubmittedAt) {
		toSerialize["submittedAt"] = o.SubmittedAt
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.TpspId) {
		toSerialize["tpspId"] = o.TpspId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableQEvent struct {
	value *QEvent
	isSet bool
}

func (v NullableQEvent) Get() *QEvent {
	return v.value
}

func (v *NullableQEvent) Set(val *QEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableQEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableQEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQEvent(val *QEvent) *NullableQEvent {
	return &NullableQEvent{value: val, isSet: true}
}

func (v NullableQEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


