/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the WebhookEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookEvent{}

// WebhookEvent struct for WebhookEvent
type WebhookEvent struct {
	Event *QEvent `json:"event,omitempty"`
	EmailMessage *QEmailMessage `json:"emailMessage,omitempty"`
}

// NewWebhookEvent instantiates a new WebhookEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookEvent() *WebhookEvent {
	this := WebhookEvent{}
	return &this
}

// NewWebhookEventWithDefaults instantiates a new WebhookEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookEventWithDefaults() *WebhookEvent {
	this := WebhookEvent{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *WebhookEvent) GetEvent() QEvent {
	if o == nil || IsNil(o.Event) {
		var ret QEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetEventOk() (*QEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *WebhookEvent) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given QEvent and assigns it to the Event field.
func (o *WebhookEvent) SetEvent(v QEvent) {
	o.Event = &v
}

// GetEmailMessage returns the EmailMessage field value if set, zero value otherwise.
func (o *WebhookEvent) GetEmailMessage() QEmailMessage {
	if o == nil || IsNil(o.EmailMessage) {
		var ret QEmailMessage
		return ret
	}
	return *o.EmailMessage
}

// GetEmailMessageOk returns a tuple with the EmailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookEvent) GetEmailMessageOk() (*QEmailMessage, bool) {
	if o == nil || IsNil(o.EmailMessage) {
		return nil, false
	}
	return o.EmailMessage, true
}

// HasEmailMessage returns a boolean if a field has been set.
func (o *WebhookEvent) HasEmailMessage() bool {
	if o != nil && !IsNil(o.EmailMessage) {
		return true
	}

	return false
}

// SetEmailMessage gets a reference to the given QEmailMessage and assigns it to the EmailMessage field.
func (o *WebhookEvent) SetEmailMessage(v QEmailMessage) {
	o.EmailMessage = &v
}

func (o WebhookEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.EmailMessage) {
		toSerialize["emailMessage"] = o.EmailMessage
	}
	return toSerialize, nil
}

type NullableWebhookEvent struct {
	value *WebhookEvent
	isSet bool
}

func (v NullableWebhookEvent) Get() *WebhookEvent {
	return v.value
}

func (v *NullableWebhookEvent) Set(val *WebhookEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookEvent(val *WebhookEvent) *NullableWebhookEvent {
	return &NullableWebhookEvent{value: val, isSet: true}
}

func (v NullableWebhookEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


