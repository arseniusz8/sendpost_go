/*
SendPost API

Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.

API version: 1.0.0
Contact: hello@sendpost.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sendpost

import (
	"encoding/json"
)

// checks if the UserAgent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAgent{}

// UserAgent struct for UserAgent
type UserAgent struct {
	Family *string `json:"Family,omitempty"`
	Major *string `json:"Major,omitempty"`
	Minor *string `json:"Minor,omitempty"`
	Patch *string `json:"Patch,omitempty"`
}

// NewUserAgent instantiates a new UserAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAgent() *UserAgent {
	this := UserAgent{}
	return &this
}

// NewUserAgentWithDefaults instantiates a new UserAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAgentWithDefaults() *UserAgent {
	this := UserAgent{}
	return &this
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *UserAgent) GetFamily() string {
	if o == nil || IsNil(o.Family) {
		var ret string
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.Family) {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *UserAgent) HasFamily() bool {
	if o != nil && !IsNil(o.Family) {
		return true
	}

	return false
}

// SetFamily gets a reference to the given string and assigns it to the Family field.
func (o *UserAgent) SetFamily(v string) {
	o.Family = &v
}

// GetMajor returns the Major field value if set, zero value otherwise.
func (o *UserAgent) GetMajor() string {
	if o == nil || IsNil(o.Major) {
		var ret string
		return ret
	}
	return *o.Major
}

// GetMajorOk returns a tuple with the Major field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetMajorOk() (*string, bool) {
	if o == nil || IsNil(o.Major) {
		return nil, false
	}
	return o.Major, true
}

// HasMajor returns a boolean if a field has been set.
func (o *UserAgent) HasMajor() bool {
	if o != nil && !IsNil(o.Major) {
		return true
	}

	return false
}

// SetMajor gets a reference to the given string and assigns it to the Major field.
func (o *UserAgent) SetMajor(v string) {
	o.Major = &v
}

// GetMinor returns the Minor field value if set, zero value otherwise.
func (o *UserAgent) GetMinor() string {
	if o == nil || IsNil(o.Minor) {
		var ret string
		return ret
	}
	return *o.Minor
}

// GetMinorOk returns a tuple with the Minor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetMinorOk() (*string, bool) {
	if o == nil || IsNil(o.Minor) {
		return nil, false
	}
	return o.Minor, true
}

// HasMinor returns a boolean if a field has been set.
func (o *UserAgent) HasMinor() bool {
	if o != nil && !IsNil(o.Minor) {
		return true
	}

	return false
}

// SetMinor gets a reference to the given string and assigns it to the Minor field.
func (o *UserAgent) SetMinor(v string) {
	o.Minor = &v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *UserAgent) GetPatch() string {
	if o == nil || IsNil(o.Patch) {
		var ret string
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetPatchOk() (*string, bool) {
	if o == nil || IsNil(o.Patch) {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *UserAgent) HasPatch() bool {
	if o != nil && !IsNil(o.Patch) {
		return true
	}

	return false
}

// SetPatch gets a reference to the given string and assigns it to the Patch field.
func (o *UserAgent) SetPatch(v string) {
	o.Patch = &v
}

func (o UserAgent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Family) {
		toSerialize["Family"] = o.Family
	}
	if !IsNil(o.Major) {
		toSerialize["Major"] = o.Major
	}
	if !IsNil(o.Minor) {
		toSerialize["Minor"] = o.Minor
	}
	if !IsNil(o.Patch) {
		toSerialize["Patch"] = o.Patch
	}
	return toSerialize, nil
}

type NullableUserAgent struct {
	value *UserAgent
	isSet bool
}

func (v NullableUserAgent) Get() *UserAgent {
	return v.value
}

func (v *NullableUserAgent) Set(val *UserAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAgent(val *UserAgent) *NullableUserAgent {
	return &NullableUserAgent{value: val, isSet: true}
}

func (v NullableUserAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


